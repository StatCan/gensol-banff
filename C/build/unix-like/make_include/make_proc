##### ABOUT THIS FILE #####
# Used to build converted procedures.  Can make, test, and clean procedure builds.  
# by default build as shared, but has capability to build static
##### -end ABOUT section- #####

##### DEFINE FILES, PATHS, AND TARGETS ########################################
# language
ifndef STC_LANG
STC_LANG = en
endif

# name of final build output
# CALLER MUST DEFINE `LIB_NAME = determin`
TARGET_STATIC = lib$(LIB_NAME)_$(STC_LANG).a
TARGET_SHARED = lib$(LIB_NAME)_$(STC_LANG).so

# If paths undefined, call MakeDirPaths Make file
ifeq ($(INIT_DIR_PATH),)
# NOTE: `REL_ROOT` is the relative path from the CURRENT WORKING DIRECTORY (CWD)
#       In this case, it's the CWD of the caller at the line that THIS file was included
#       example: procedure MakeFiles CWD will be the proc's C file directory
include $(REL_ROOT)/MakeDirPaths
endif

# Default Values
include $(DIR_C_MAKE_INCLUDE)MakeDefaults

# object files are binary are stored in their own "build directories"
# define the relative path to build directories
DP_BIN = $(DIR_PYTHON_BIN)
DP_OBJ = ./obj/$(STC_LANG)/

# define source files/directories
#  LST_SRC_SUBDIR - list of source-code-containing subfolders
#  LST_FP_HEADER  - list of file paths to header files
#  LST_FP_SRCS    - list of file paths to source files
#  LST_SRC_NAMES  - list of names (with extensions) of source files
#  LST_FP_OBJS    - list of names (with extensions) of object files
LST_SRC_SUBDIR = ../proc_common
LST_FP_HEADER  = $(wildcard $(DIR_SRC_ROOT)*.h $(foreach fd, $(LST_SRC_SUBDIR), $(DIR_SRC_ROOT)$(fd)/*.h))
LST_FP_SRCS    = $(wildcard $(DIR_SRC_ROOT)*.c $(foreach fd, $(LST_SRC_SUBDIR), $(DIR_SRC_ROOT)$(fd)/*.c))
LST_SRC_NAMES  = $(notdir $(LST_FP_SRCS))
LST_FP_OBJS    = $(subst $(DIR_SRC_ROOT), $(DP_OBJ), $(LST_FP_SRCS:c=o)) # obj/xxx.o obj/folder/xxx .o
# NOTE: The following `subst` allows us to compile C files from parent directories properly
# replace any `../` with `__/`, otherwise paths like `$(DP_OBJ)../foo` place files outside of `$(DP_OBJ)`
LST_FP_OBJS    := $(subst ../,__/,$(LST_FP_OBJS)) # obj/../xxx.o -> obj/__/xxx .o
#  LST_FP_LIBS    - list of file paths to in-house static library builds
LST_FP_LIBS = 
LST_FP_LIBS += $(DIR_BANFFAPI)/bin/libBanffAPI_$(STC_LANG).a
LST_FP_LIBS += $(DIR_COMMONAPI)/bin/libCommonAPI_$(STC_LANG).a
LST_FP_LIBS += $(DIR_LPINTERFACE)/bin/libLPInterface_$(STC_LANG).a
LST_FP_LIBS += $(DIR_GLPK)/bin/libglpk.a
LST_FP_LIBS += $(DIR_IOUTIL)/bin/libIOUtilities_$(STC_LANG).a

# LST_DP_EXTRA_HEADER - list of directory paths (DP) to libraries (in-house and 3rd party)
LST_DP_EXTRA_HEADER = $(DIR_JANSSON_SRC)/src/ \
							 $(DIR_ARROW_SRC)/src/ \
							 $(DIR_ARROW)/build/src/ \
							 ../BanffHeaderFiles \
							 $(DIR_BANFFAPI_SRC) \
							 $(DIR_COMMONAPI_SRC) \
							 $(DIR_GLPK_SRC) \
							 $(DIR_LPINTERFACE_SRC) \
							 $(DIR_IOUTIL_SRC)

##### DEFINE COMPILER AND LINKER FLAGS ########################################
CC = gcc
LD = ld

# build C compiler flags
CDEFS  = -DLINUX -D_$(STC_LANG) -DSTC_LOGGING_DISABLED '-DGLPKVERSION="4.53"'\
         '-DSI_SYSTEMNAME="Banff"' \
         '-DSI_SYSTEMVERSION="$(BANFF_VERSION_SYSTEM)"' \
         '-DSI_PROCVERSION="$(BANFF_VERSION_PROC)"' \
         '-DSI_EMAIL="banff@statcan.gc.ca"'
# openmp (aka "open mp", "omp"): disabled, reenable with `-fopenmp`
CFLAGS = $(DEFAULT_C_FLAGS) -c -m64 -fPIC $(CDEFS)
# generate list of include flags (ex. "-I path/to/lib1 -I /path/lib2 ...")
LST_CF_INCLUDE = -I$(DIR_SRC_ROOT) $(foreach fd, $(LST_SRC_SUBDIR), -I$(DIR_SRC_ROOT)$(fd))
# append paths to imported external libraries
LST_CF_INCLUDE     += -I./ $(addprefix -I, $(LST_DP_EXTRA_HEADER))

# build C linker (ld) flags (options)
LDOPTS = -shared -Bsymbolic -lc -lm
# add path to jansson library
LDOPTS += -L $(DIR_JANSSON_SRC)/src/.libs
LDOPTS += -L /usr/lib/gcc/x86_64-redhat-linux/8/
# add path to arrow library
LDOPTS += -L $(DIR_ARROW)/build/
# programatically add paths for STC libraries to LDOPTS
# --*-group used to resolve circular dependency issues
LDOPTS += --start-group
LDOPTS += $(LST_FP_LIBS)
LDOPTS += --end-group
# force libraries to link statically 
LDOPTS += -l:libjansson.a
LDOPTS += -l:libnanoarrow.a
# openmp (aka "open mp", "omp"): disabled, reenable with `LDOPTS += -lgomp`

##### DEFINE CALLABLE BUILD TARGETS ###########################################
# default target: build shared library
.PHONY: all
all: shared

.PHONY: test
test: 
	python3 $(DIR_TEST_LOW_LEVEL)/linux_proc_test_script.py "$(realpath $(DP_BIN))/$(TARGET_SHARED)"

## build static library
.PHONY: static
static: $(DP_BIN)$(TARGET_STATIC)

## build shared library
.PHONY: shared
shared: $(DP_BIN)$(TARGET_SHARED)
	ldd $(DP_BIN)$(TARGET_SHARED)

##### DEFINE BUILD STEPS ######################################################
## STATIC: Archive objects
$(DP_BIN)$(TARGET_STATIC): $(LST_FP_OBJS) $(LST_FP_LIBS)
	mkdir -p $(@D)
	ar -crs $@ $(LST_FP_OBJS)

## SHARED: Link objects
$(DP_BIN)$(TARGET_SHARED): $(LST_FP_OBJS) $(LST_FP_LIBS)
	mkdir -p $(@D)
	$(LD) -o $@ $(LST_FP_OBJS) $(LDOPTS)

## COMPILE PROPER (i.e. without linking) the source code
# NOTE: headers listed in prereqs so updates to header files cause rebuild
$(DP_OBJ)%.o: %.c $(LST_FP_HEADER)
	mkdir -p $(@D)
	$(CC) -o $@ $< $(CFLAGS) $(LST_CF_INCLUDE)
# DEVELOPER NOTE: the following rule is for compiling .c files from parent directory
# DEVELOPER NOTE: to support more than one `../`, additional rules may be required
$(DP_OBJ)__/%.o: ../%.c $(LST_FP_HEADER)
	mkdir -p $(@D)
	$(CC) -o $@ $< $(CFLAGS) $(LST_CF_INCLUDE)

##### DEFINE OTHER CALLABLE TARGETS ###########################################
.PHONY: diagnose
diagnose:
	@echo "Makefile ($(LIB_NAME)): DIAGNOSTICS"
	@echo
	@echo "LIB_NAME: ${LIB_NAME}"
	@echo
	@echo "TARGET_STATIC: ${TARGET_STATIC}"
	@echo
	@echo "TARGET_SHARED: ${TARGET_SHARED}"
	@echo
	@echo "DP_BIN: ${DP_BIN}"
	@echo
	@echo "DP_OBJ: ${DP_OBJ}"
	@echo
	@echo "DIR_SRC_ROOT: ${DIR_SRC_ROOT}"
	@echo
	@echo "LST_SRC_SUBDIR: ${LST_SRC_SUBDIR}"
	@echo
	@echo "LST_FP_HEADER: ${LST_FP_HEADER}"
	@echo
	@echo "LST_FP_SRCS: ${LST_FP_SRCS}"
	@echo
	@echo "LST_SRC_NAMES: ${LST_SRC_NAMES}"
	@echo
	@echo "LST_FP_OBJS: ${LST_FP_OBJS}"
	@echo
	@echo "CC: ${CC}"
	@echo
	@echo "CFLAGS: ${CFLAGS}"
	@echo
	@echo "LDOPTS: ${LDOPTS}"
	@echo
	@echo "LST_CF_INCLUDE: ${LST_CF_INCLUDE}"
	
	
.PHONY: clean
clean:
	-rm -r -v --one-file-system --preserve-root=all $(DP_OBJ)
	-rm -v --one-file-system --preserve-root=all $(DP_BIN)/$(TARGET_SHARED)
	-rm -v --one-file-system --preserve-root=all $(DP_BIN)/$(TARGET_STATIC)
