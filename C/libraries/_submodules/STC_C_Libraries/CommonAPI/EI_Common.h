#ifndef EI_COMMON_H
#define EI_COMMON_H

#include <limits.h>
#include "EIP_Common.h"

/*
experimentalement!!!
une valeur étrange NÉGATIVE pour ne pas la mélanger avec 'les bonnes valeurs'
et plus grand que EIM_DBL_EPSILON pour ne pas etre confondu avec zero
quand les macro EIM_DBL_XXX sont utilisé
*/
#define EIM_MISSING_VALUE (-(EIM_DBL_EPSILON*2))
#define EIM_IS_MISSING(x) ((x)==EIM_MISSING_VALUE)

#define EIM_IS_NEGATIVE(x) (!EIM_IS_MISSING(x)&&EIM_DBL_LT((x),0.0))

/*
"define" pour tester les valeurs acceptables par le système pour un INT
 (ex.: paramètres "SEED", "MINDONORS" et "N")
*/
#define EIM_MAX_INT INT_MAX
#define EIM_MIN_INT INT_MIN

/*
Windows needs a special modifier in front of external function.
Do we need machdef.h
*/
/*#ifdef WIN32*/
/*#define EIM_EXTERN extern __declspec(dllexport)*/
/*#else*/
/*#define EIM_EXTERN extern*/
/*#endif*/
#if defined (_EXPORTING) /* when building the DLL for Windows */
    #define CLASS_DECLSPEC __declspec(dllexport)
#elif defined (_IMPORTING) /* when importing the DLL for Windows */
    #define CLASS_DECLSPEC __declspec(dllimport)
#else
  #define CLASS_DECLSPEC extern
#endif

/* Something was not found! */
#define EIM_NOTFOUND -1

/* Size of a variable name (default is SAS variable name size) */
#define EIM_VARIABLE_NAME_MAX_SIZE 100
#define EIM_VARIABLE_NAME_DEFAULT_SIZE 64

/* Valid character set for a variable name */
#define EIM_VARIABLE_NAME_FIRST_CHARACTER_CHARACTER_SET \
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ_"
#define EIM_VARIABLE_NAME_CHARACTER_SET "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_"

/* Status code generated by banff functions */
#define EIM_STATUS_SIZE 4
typedef char EIT_STATUS[EIM_STATUS_SIZE+1];

#define EIM_STATUS_FTE        "FTE"
#define EIM_STATUS_FTI        "FTI"
#define EIM_STATUS_IDE        "IDE"
#define EIM_STATUS_IDN        "IDN"
#define EIM_STATUS_IMAS       "IMAS"
#define EIM_STATUS_IPR        "IPR"
#define EIM_STATUS_MFB        "MFB"
#define EIM_STATUS_MFS        "MFS"
#define EIM_STATUS_MFU        "MFU"
#define EIM_STATUS_ODEL       "ODEL"
#define EIM_STATUS_ODER       "ODER"
#define EIM_STATUS_ODIL       "ODIL"
#define EIM_STATUS_ODIR       "ODIR"

/* special status: sometimes it is good to know if the data is good */
#define EIM_STATUS_GOOD       "GOOD"

/* Boolean type / Type Boolean */
enum EIT_BOOLEAN {
    EIE_FALSE=0,
    EIE_TRUE=1
};
typedef enum EIT_BOOLEAN EIT_BOOLEAN;

/* Return codes / Codes de retour */
typedef enum {
    EIE_FAIL=-2,
    EIE_SUCCEED=0
} EIT_RETURNCODE;

/* Return codes for the read function*/
/**/
/*Codes de retour pour la fonction de lecture */
typedef enum {
    EIE_READCALLBACK_FAIL=-2,
    EIE_READCALLBACK_NOTFOUND=-1,
    EIE_READCALLBACK_FOUND=1
} EIT_READCALLBACK_RETURNCODE;

/* Return codes for the mainline write function*/
/**/
/*Codes de retour pour la fonction d'écriture du programme principal */
typedef enum {
    EIE_WRITECALLBACK_FAIL=-2,
    EIE_WRITECALLBACK_SUCCEED=0
} EIT_WRITECALLBACK_RETURNCODE;

/* Observation exclusion / Exclusion de l'observation */
typedef enum {
    EIE_EXCLUDED = 1,
    EIE_INCLUDED = 0
} EIT_EXCLUSION;


/* Status of fields / Statut des champs */
typedef enum {
    FIELDOK,
    FIELDFTI,
    FIELDMFU,
    FIELDMFS,
    FIELDMFB,
    FIELDIDE,
    FIELDMISS,
    FIELDNEG,
    FIELDFTE,
    FIELDIMPUTED /* by any methods */
} EIT_STATUS_OF_FIELDS;

/*
EIT_DATAREC  - Respondent data/Données du répondant
This structure will be used by deterministic and donor imputation to hold
the data for one respondent at a time.

Cette structure sert aux méthodologies d'imputation déterministique et par
donneur et contient l'information d'un répondant à la fois
*/
typedef struct {
        /*Names of Edits fields/Noms des champs des équations*/
    char                 ** FieldName;
        /*Values of the Edits fields/Valeurs des champs des équations*/
    double               *  FieldValue;
        /*Status of the fields/Statut des champs*/
    EIT_STATUS_OF_FIELDS *  StatusFlag;
        /*Number of Fields/Nombre de champs*/
    int                     NumberofFields;
} EIT_DATAREC;

/*
EIT_ALL_RECIPIENTS: Data for all recipients - Données pour tous les receveurs
This structure holds the information for all recipients

Cette structure contient l'information pour tous les receveurs
*/
typedef struct {
        /*Number of recipients/Nombre de receveurs*/
    int NumberofRecipients;
        /*Number of allocated recipients/Nombre de receveurs alloués*/
    int NumberofAllocatedRecipients;
        /*Key Value/Valeur de la clé*/
    char ** Key;
        /*Data for one recipient/Données pour un receveur*/
    EIT_DATAREC * RecipientData;
} EIT_ALL_RECIPIENTS;

/*
EIT_ALL_RESPONDENTS: Data for all respondents - Données pour tous les répondants
This structure holds the information for all respondents

Cette structure contient l'information pour tous les répondants
*/
typedef struct {
        /*Number of respondents/Nombre de répondants*/
    int NumberofRespondents;
        /*Number of allocated respondents/Nombre de répondants alloués*/
    int NumberofAllocatedRespondents;
        /*Key Value/Valeur de la clé*/
    char ** Key;
        /*Data for one respondent/Données pour un répondant*/
    EIT_DATAREC   * RespondentData;
        /*Respondent exclusion/Exclusion du répondant*/
    EIT_EXCLUSION * RespondentExclusion;
} EIT_ALL_RESPONDENTS;

/* EIT_DATA_KEY - Respondent key data - Données sur la clé pour le répondant*/
/* This structure is used to hold information on the key for the record*/
/**/
/* Cette structure sert à décrire la clé pour l'enregistrement traité.*/
/**/
/* Structure variables / Variables de la structure:*/
/**/
/* char *KeyName;     Field key's name*/
/*                    Nom du champ clé*/
/**/
/* char *KeyValue;    Field key's value*/
/*                    Valeur du champ clé*/
typedef struct {
    char *KeyName;
    char *KeyValue;
} EIT_DATA_KEY;

/* EIT_FIELDNAMES - List of field names/Liste de noms de champs*/
/* This structure holds a list of field names and their number.*/
/**/
/* Cette structure contient une liste de noms de champs et leur nombre.*/
/**/
/* Structure variables / Variables de la structure:*/
/* char   ** FieldName;        Names of Edits fields*/
/*                             Noms des champs des équations*/
/**/
/* int       NumberofFields;   Number of Fields*/
/*                             Nombre de champs */
typedef struct {
    char ** FieldName;
    int     NumberofFields;
} EIT_FIELDNAMES;

/* Call back function to read matching field values*/
/**/
/* Fonction de lecture des champs d'appariement*/
typedef EIT_READCALLBACK_RETURNCODE (*EIT_MFREADCALLBACK) (
    char *FieldName,
    int *RecordIndex,
    char **Key,
    double *Value
);

/* Call back function to write results of tree search */
/**/
/* Fonction d'écriture pour la recherche dans l'arbre */
/* returns EIT_WRITECALLBACK_RETURNCODE*/
typedef EIT_WRITECALLBACK_RETURNCODE (*EIT_WRITERESULTS) (
    void * UserData,
    double * OutValues,
    EIT_STATUS_OF_FIELDS * OutStatus,
    char * CurrentKey,
    char * DonorKey,
    char ** FieldName,
    int NumberofFields,
    int NumberOfAttempts
);

/*
Call back function to print.
*/
typedef int (*EIT_PRINTF) (
    const char * Format,
    ...
);

/*
Defines valid aggregates.
*/
enum AGGREGATE {
    EIE_AGGREGATE_VALUE,
    EIE_AGGREGATE_AVERAGE,
    EIE_AGGREGATE_INVALID
};
typedef enum AGGREGATE EIT_AGGREGATE;

/*
Defines valid periods.
ATTENTION: be carefull whet you do to this enum. EIE_PERIOD_CURRENT and
EIE_PERIOD_HISTORICAL are used as an index into an array.
*/
enum PERIOD {
    EIE_PERIOD_CURRENT,
    EIE_PERIOD_HISTORICAL,
    EIE_PERIOD_INVALID
};
typedef enum PERIOD EIT_PERIOD;

#endif
